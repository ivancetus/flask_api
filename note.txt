"""
subprocess command couldn't parse url for some reason, have to add shell=True, but security risk

# url = urllib.parse.quote(arg1, safe=':/')
    # command = ['python', 'youtube_download.py', str(arg1), str(arg2)]
    # joined_command = ' '.join(shlex.quote(arg) for arg in command)  #shell=True dangerous
    # command = ['python', 'youtube_download.py', shlex.quote(arg1), arg2]
    # command = f'python youtube_download.py {url} {arg2}'
    # command = ['python', 'youtube_download.py', url, arg2]
    #
    # command = ["python", "youtube_download.py", arg1, arg2]
    # print(command)
    # try:
    #     result = subprocess.run(command, capture_output=True, text=True, check=True, timeout=60, shell=True)
    #     outputs = result.stdout
    #     print(outputs)
    #     lines = outputs.strip().split('\n')
    #     for line in lines:
    #         if line.endswith(".mp3"):
    #             mp3_path = line
    #             break
    # except Exception as e:
    #     print(e)
"""


"""
some test regarding router

# @app.route('/yt', methods=['POST'])
# def post_input():
#     data = request.get_json()
#     url = data['url']
#     result = url
#     return jsonify({'return': result})
#
#
# @app.route('/<name>')
# def hello_world(name=None):
#     if name is None:
#         print("Hello")
#         return 'Hello World!'
#     return f'Hello {name} !'
#
#
# # -------------------------
# @app.route('/user/<name>')
# def hello_user(name):
#     if name == 'admin':
#         return redirect(url_for('hello_admin'))
#     else:
#         return redirect(url_for('hello_guest', guest=name))
#
#
# @app.route('/guest/<guest>')
# def hello_guest(guest):
#     return 'hello guest %s' % guest
#
#
# @app.route('/admin')
# def hello_admin():
#     return 'HELLO ADMIN'
# # -------------------------
#
#
# @app.route('/index/<name>')
# def index(name):
#     return render_template(r'index.html', name=name)
#
#
#
# @app.route('/test-case/<test>')
# def test_case(test):
#     return 'test %s ?' % test
#
#
# @app.route('/add/num1=<num1>&num2=<num2>', methods=['GET'])
# def add(num1, num2):
#     print(num1 + num2)
#     return str(int(num1) + int(num2))
#
#
# # name/ => 404 not found
# # name => ok
# @app.route('/hello/<name>')
# def hello(name):
#     return 'hello %s !' % name
#
#
# # url => ok
# # url/ => ok, variable => url/
# @app.route('/url/<path:url>')
# def hello2(url):
#     return 'hello %s !' % url
#
#
# # if not int => 404 not found
# @app.route('/post_id/<int:post_id>')
# def hello3(post_id):
#     return 'hello %d !' % post_id
#
#
# @app.route('/float/<float:num>')
# def hello4(num):
#     return 'hello %f !' % num

# @app.route('/success/<name>')
# def success(name):
#     return 'welcome %s' % name
#
#
# @app.route('/login', methods=['POST', 'GET'])
# def login():
#     if request.method == 'POST':
#         user = request.form['name']
#         return redirect(url_for('success', name=user))
#     else:
#         user = request.args.get('name')
#         return redirect(url_for('success', name=user))


# @app.route('/ytd', methods=['POST'])
# def ytd():
#     data = request.get_json()
#     youtube_url = data['url']
#     file_format = data['format']
#
#     command = ['python', 'youtube_download.py', youtube_url, file_format]
#     result = subprocess.run(command, capture_output=True, text=True)
#     output = {'mp3': result.stdout}
#     return jsonify(output)
"""


"""
# using selenium to search
# @app.route('/ytd', methods=['POST'])
# def ytd():
#     mp3_path = ""
#     data = request.get_json()
#     print(data)
#     youtube_url = data['url']
#     file_format = data['format']
#     logging.info(f'Processed json request: {data}')
#     try:
#         mp3_path = get_ytd(youtube_url, file_format)
#     except Exception as e:
#         logging.error(f'Error occurred: {str(e)}')
#     # if mp3_path == "":
#     #     return "error, related script no executed properly"
#     # response = make_response(send_file(mp3_path, mimetype='audio/mpeg', as_attachment=True))
#     # response.headers['file-name'] = os.path.basename(mp3_path).split('.')[0]
#     # response.headers['Content-Type'] = 'audio/mpeg'
#     # return response
#     return send_file(mp3_path, mimetype='audio/mpeg', as_attachment=True)

"""